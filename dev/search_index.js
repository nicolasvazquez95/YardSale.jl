var documenterSearchIndex = {"docs":
[{"location":"tutorials/ode_systems/ode_systems/#Import-necessary-packages","page":"ODE systems","title":"Import necessary packages","text":"","category":"section"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"using DifferentialEquations, Graphs\nusing YardSale\nusing Plots, LaTeXStrings, ColorSchemes","category":"page"},{"location":"tutorials/ode_systems/ode_systems/#Description-of-the-model","page":"ODE systems","title":"Description of the model","text":"","category":"section"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"Here we're going to use the functionalities of the ODE solver implemented in YardSale.jl. These are simple functions that wrap the DifferentialEquations.jl package to solve the ODE systems we're interested in. By wrapping, we are allowed to explore efficiently the parameters space.","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"The models we're going to explore belong to a wider class of models called Asset Exchange Models. These are models inspired in the statistical physics of interacting particles. The main idea is that agents exchange assets in a network, just like particles exchange energy in a physical system. The dynamics of the system is given by the exchange rules, which usually involve binary transactions. For a review of these models, see for example Greenberg, M., Gao, H.O. Twenty-five years of random asset exchange modeling. Eur. Phys. J. B 97, 69 (2024) DOI.","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"Here, we're studying specifically and ODE approximation of one of these models, called the \"Extended Yard-Sale Model\" (EYSM), published in Boghosian et al. (2017). Physica A, 476, 15-42 DOI. For details on the derivation of the equations please refer to our original paper.","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"Given a network a, the model is defined by the following set of ODEs:","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"dotx_i = fracTN bigg(-beta_i x_i+frac1Nsum_j beta_j x_jbigg) + sum_jkappa_ij(x_i-x_jmin(x_ix_j)","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"where x_i represents the (expected) relative wealth of agent i, and T represents the temperature. The parameters beta_i and kappa_ij are parameters which contain information about the network structure of a, and the way in which agents get taxed and interact with each other, respectively.","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"As described in the original paper, the EYSM exhibits a second-order phase transition as a function of the temperature T when the network is a complete graph. This transition is characterized by the emergence of an oligarchy at low temperatures, where a few agents accumulate most of the wealth. At high temperatures, the wealth is more evenly distributed among the agents. The transition is characterized by the order parameter x_1 (the wealth of the richest agent) as a function of the temperature T. In the thermodynamic limit, the order parameter behaves as","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"x_1(T) = begincases\n        1 - T  textif  T leq 1 \n        0  textif  T  1endcases","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"In this notebook, we're going to reproduce the phase transition of the EYSM in a complete graph, using the implementation of the ODE solver in YardSale.jl.","category":"page"},{"location":"tutorials/ode_systems/ode_systems/#1.-A-first-look-at-the-model","page":"ODE systems","title":"1. A first look at the model","text":"","category":"section"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"Let's study the time evolution of the wealth distribution in the original EYSM. We'll set a system of few agents, and we'll plot the wealth of all agents as a function of time.","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"# Number of nodes\nN = 16\n# A complete graph with N nodes (Graphs.jl)\ng = complete_graph(N)\n# Interaction and taxation modes\ninteraction_mode = \"A\"\ntaxation_mode = \"A\"\n# Temperature\nT = 1.0\n# Time span\ntspan = (0.0, 30000)\ndt = 10\n# Seed\nseed = 42\n# Initial conditions\ninitial_conditions = \"noisy\" # Defaul, but you can also use \"random\", \"custom\", or \"uniform\"\n;","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"# Solve the system\nsol = solve_ode_net(\n    g,\n    tspan,\n    interaction_mode,\n    taxation_mode,\n    T,\n    seed;\n    integrator = Tsit5(),\n    initial_conditions = initial_conditions,\n    saveat = dt\n)\n;","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"# Get the time series of the state variables, sorted by final state\nx_t = hcat(sol.u...)'[:, sortperm(sol.u[end])]","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"3001×16 Matrix{Float64}:\n 0.0611785  0.0615817  0.0619628  …  0.0630102  0.0630252  0.0634045\n 0.0611742  0.0615783  0.0619606     0.0630128  0.0630278  0.0634091\n 0.0611699  0.0615749  0.0619584     0.0630154  0.0630305  0.0634137\n 0.0611656  0.0615715  0.0619563     0.063018   0.0630332  0.0634184\n 0.0611612  0.0615681  0.0619541     0.0630206  0.0630359  0.063423\n 0.0611569  0.0615646  0.0619519  …  0.0630232  0.0630386  0.0634277\n 0.0611526  0.0615612  0.0619497     0.0630258  0.0630413  0.0634324\n 0.0611482  0.0615577  0.0619475     0.0630285  0.063044   0.0634371\n 0.0611438  0.0615543  0.0619452     0.0630311  0.0630467  0.0634418\n 0.0611395  0.0615508  0.061943      0.0630338  0.0630495  0.0634466\n 0.0611351  0.0615473  0.0619408  …  0.0630365  0.0630522  0.0634513\n 0.0611307  0.0615438  0.0619385     0.0630392  0.063055   0.0634561\n 0.0611263  0.0615403  0.0619363     0.0630419  0.0630578  0.063461\n ⋮                                ⋱                        ⋮\n 0.0585937  0.0585937  0.0585937     0.058595   0.0585952  0.119949\n 0.0585937  0.0585937  0.0585937  …  0.058595   0.0585952  0.119949\n 0.0585937  0.0585937  0.0585937     0.058595   0.0585952  0.119949\n 0.0585937  0.0585937  0.0585937     0.058595   0.0585952  0.119949\n 0.0585937  0.0585937  0.0585937     0.058595   0.0585952  0.119949\n 0.0585937  0.0585937  0.0585937     0.058595   0.0585952  0.119949\n 0.0585937  0.0585937  0.0585937  …  0.058595   0.0585952  0.119949\n 0.0585937  0.0585937  0.0585937     0.0585949  0.0585952  0.119949\n 0.0585937  0.0585937  0.0585937     0.0585949  0.0585952  0.119949\n 0.0585937  0.0585937  0.0585937     0.0585949  0.0585952  0.119949\n 0.0585937  0.0585937  0.0585937     0.0585949  0.0585952  0.119949\n 0.0585937  0.0585937  0.0585937  …  0.0585949  0.0585951  0.119949","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"# Rescale the time units to MC steps\nt_mcs = rescale_t(sol.t,N)\n;","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"# Make the paper plot\np = plot(\n    ylabel = L\"x_i\",\n    xlabel = L\"t\"*\" [\"*L\"10^{4}\\;\\mathrm{MC\\;steps}]\",\n    fontfamily = \"Computer Modern\",\n    legend_title = \"ODE - Wealth distribution\",\n    xguidefontsize = 17,\n    yguidefontsize = 17,\n    legendfontsize = 15,\n    legendtitlefontsize = 16,\n    xtickfontsize = 17,\n    ytickfontsize = 17,\n    palette = :tol_nightfall,\n    size=(640,480),\n    fmt=:png,\n    ylims = (:auto, 0.13),\n    xlims = (0,:auto),\n    minorticks = true\n)\n\nfor i in 1:N\n    plot!(t_mcs ./ 1e4, x_t[:, i], label = \"\", lw = 2)\nend\n\ndisplay(p)","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"(Image: Time evolution of the system)","category":"page"},{"location":"tutorials/ode_systems/ode_systems/#2.-Wealth-of-the-richest-agent-as-a-function-of-the-temperature-(order-parameter)","page":"ODE systems","title":"2. Wealth of the richest agent as a function of the temperature (order parameter)","text":"","category":"section"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"Next, we'd like to see the phase transition looking at the plot of the wealth of the richest agent x_1 as a function of the temperature T. We must run the simulation at different temperatures, record the wealth of the richest agent at the end of the simulations. We'll then plot the wealth of the richest agent as a function of the temperature. Notice that the simulations have an transient period, so we must run the simulations for a long enough time to ensure that the system has reached the steady state. For our purposes, a t_textmax = 10^7 should be enough. In any case, as we're not interested in intermediate times, we'll use a different solver, provided by the DifferentialEquations.jl package, which can search for the steady state of the system. That is what the solve_ode_steady_state function does.","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"We must increase the default tolerance of the integrator, because the system has critical behavior near the phase transition. We'll set the tolerante to 10^-15.","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"# The system has to be big enough to discard finite size effects\nN = 128\ng = complete_graph(N)\n# Interacion and taxation modes\ninteraction_mode = \"A\"\ntaxation_mode = \"B\"\n# Time span\ntspan = (0.0, 1e7)\n# Different temperatures\ntemperatures = 0.0:0.05:2.0\n# Seed\nseed = 42","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"42","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"# Run simulations\nx1_T = zeros(length(temperatures))\n# Solve the system for different temperatures\nfor (i,T) in enumerate(temperatures)\n    sol = solve_ode_steady_state(\n        g,\n        interaction_mode,\n        taxation_mode,\n        T,\n        seed;\n        integrator = Tsit5(),\n        initial_conditions = initial_conditions,\n        reltol=1e-15,\n        abstol=1e-15\n    )\n    x1_T[i] = maximum(sol.u)\nend","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"p2 = plot(\n    ylabel = L\"x_1\",\n    xlabel = L\"T\",\n    fontfamily = \"Computer Modern\",\n    legend_title = \"ODE: \" * L\"x_1\" * \" vs \" * L\"T\",\n    xguidefontsize = 17,\n    yguidefontsize = 17,\n    legendfontsize = 15,\n    legendtitlefontsize = 16,\n    xtickfontsize = 17,\n    ytickfontsize = 17,\n    palette = :julia,\n    size=(640,480),\n    fmt=:png,\n    minorticks = true\n)\n\np = scatter!(\n    p2,\n    temperatures,\n    x1_T,\n    label = L\"N=\"*\"$N\",\n    ms = 5,\n    color = 1\n    )\n\np2 = plot!(p2,temperatures[1:21], x1_T[1:21], label=L\"x_1 = 1 - T\", lw = 2,ls=:dot,color=2)\np2 = hline!(p2,[1/N],label=L\"x_1 = 1/N\",lw=2,ls=:dot,color=3)","category":"page"},{"location":"tutorials/ode_systems/ode_systems/","page":"ODE systems","title":"ODE systems","text":"(Image: x_1 vs. T)","category":"page"},{"location":"api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [YardSale]\nOrder   = [:type, :function]","category":"page"},{"location":"api/#YardSale.dxdt_net!-NTuple{4, Any}","page":"API","title":"YardSale.dxdt_net!","text":"dxdt_net!(dxdt, x, p, t)\n\nIn-place function to calculate the derivatives of the network model.\n\nArguments\n\ndxdt::Vector{<:Real}: Vector of derivatives.\nx::Vector{<:Real}: Vector of wealths.\np::Tuple{<:Integer, <:Integer, Vector{Vector{<:Integer}},\nVector{<:Integer}, Vector{<:Array}, ::Real, ::Real}: Parameters.\nt::Float64: Time.\n\nDetails\n\nThe network model is given by the following set of ODEs:\n\ndotx_i = fracTN (- beta_i x_i + sum_j^N eta_j x_j) + sum_j^N kappa_ij\n(x_i - x_j) min(x_i x_j)\n\nwhere x_i is the wealth of node i, T is temperature, N is the number of nodes, beta_i is the redistribution parameter of node i, kappa_ij is the exchange parameter between nodes i and j.\n\n\n\n\n\n","category":"method"},{"location":"api/#YardSale.get_kappa_beta-Tuple{Graphs.SimpleGraphs.SimpleGraph, String, String}","page":"API","title":"YardSale.get_kappa_beta","text":"get_kappa_beta(g::SimpleGraph{<:Integer},interaction_mode::String,taxation_mode::String)\n\nReturn the κ matrix and the β vector for the ODEs, given a graph, an Interaction Mode and a Taxation Mode.\n\nArguments\n\ng::SimpleGraph{<:Integer}: Undirected graph.\ninteraction_mode::String: Interaction Mode. Can be \"A\" or \"B\".\ntaxation_mode::String: Taxation Mode. Can be \"A\" or \"B\".\n\nReturns\n\nTuple{Vector{Float64},Vector{Float64}}: κ matrix and β vector.\n\nExamples\n\ng = complete_graph(4)\nYardSale.get_kappa_beta(g,\"A\",\"A\")\n\n\n\n\n\n","category":"method"},{"location":"api/#YardSale.mc_set_initial_conditions","page":"API","title":"YardSale.mc_set_initial_conditions","text":"mc_set_initial_conditions(N::Integer, W_N::Real, initial_conditions::String,\n    w::Union{Nothing, Vector{<:Real}}=nothing)\n\nSet the initial conditions for the Monte Carlo simulation.\n\nArguments\n\nN::Integer: Number of agents.\nW_N::Real: Total wealth per agent.\ninitial_conditions::String: Initial condition. Options are \"uniform\", \"random\", \"noisy\"\nand \"custom\".\nw::Union{Nothing, Vector{<:Real}}=nothing: Initial wealth distribution. Only used if\ninitial_conditions=\"custom\". Default is nothing.\n\nReturns\n\nw::Vector{Real}: Initial wealth distribution.\n\n\n\n\n\n","category":"function"},{"location":"api/#YardSale.rescale_t-Tuple{AbstractVector, Integer}","page":"API","title":"YardSale.rescale_t","text":"rescale_t(t::AbstractVector,N::Integer)\n\nRescale the ODE time vector to MC steps.\n\nArguments\n\nt::AbstractVector: Time vector of the ODE solution.\nN::Integer: Number of nodes in the network.\n\nReturns\n\nrescaled_t::AbstractVector: Rescaled time vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#YardSale.solve_ode_net-Tuple{Graphs.SimpleGraphs.SimpleGraph, Tuple{Real, Real}, String, String, Real, Integer}","page":"API","title":"YardSale.solve_ode_net","text":"solve_ode_net(g, tspan, integrator, interaction_mode, taxation_mode, T, seed; kwargs...)\n\nSolve the ODE for the network model.\n\nArguments\n\ng::SimpleGraph{<:Integer}: Graph.\ntspan::Tuple{Float64, Float64}: Tuple with initial and final time.\ninteraction_mode::String: Interaction mode.\ntaxation_mode::String: Taxation mode.\nT::Real: Temperature.\nseed::Integer: Random seed.\n\nOptional arguments\n\n`integrator::SciMLAlgorithm`: An instante of the integrator to use. Default is Tsit5().\ninitial_conditions::String=nothing: Initial condition. Options are\n\"uniform\", \"random\", \"noisy\" and \"custom\". Default is \"uniform\". If \"custom\" is\nchosen, the x0 argument must be provided.\nx0::Union{Nothing, Vector{<:Real}}=nothing: Initial wealth distribution.\n`kwargs...`: Additional arguments for the solver.\n\nDetails\n\nThis function solves the ODE for the network model. It calculates the kappa and beta parameters, sets the initial conditions, and solves the ODE. It returns the solution in the standard DifferentialEquations.jl format. A brief description of the ODE approximation model can be found in the dxdt_net! function. The function uses the DifferentialEquations.jl package to solve the ODE. All the parameters for the solver can be passed as keyword arguments.\n\nThe initial conditions can be set to \"noisy\", \"random\", \"uniform\", or a custom vector.\n\n\"noisy\": Initial conditions are set to a random value around 1/N.\n\nx = (1/N) * (1 + ϵ) where ϵ is white noise with μ=0 and σ=0.01.\n\n\"random\": Initial conditions are set to a random value, normalized to sum to 1.\n\"uniform\": Initial conditions are set to 1/N.\n\"custom\": Initial conditions are set to a custom vector. The vector must sum to 1.\n\nAlso, x_i must be positive for all i.\n\nReturns\n\nsol::ODESolution: Solution of the ODE.\n\nExamples\n\nusing DifferentialEquations, Graphs, YardSale\n# Create a graph\ng = erdos_renyi(100, 0.1, seed=42)\ninteraction_mode, taxation_mode = \"A\",\"A\"\nT = 1.0\nseed = 42\ntspan = (0.0, 10.0)\nsol1 = solve_ode_net(g, tspan, interaction_mode, taxation_mode, T, seed)\nsol2 = solve_ode_net(g, tspan, interaction_mode, taxation_mode, T, seed; integrator=RK4())\nsol3 = solve_ode_net(g, tspan, interaction_mode, taxation_mode, T, seed;\nintegrator=RK4(), reltol=1e-6, abstol=1e-6)\n\n\n\n\n\n","category":"method"},{"location":"api/#YardSale.solve_ode_steady_state-Tuple{Graphs.SimpleGraphs.SimpleGraph, String, String, Real, Integer}","page":"API","title":"YardSale.solve_ode_steady_state","text":"solve_ode_steady_state(g, interaction_mode, taxation_mode, T, seed;\ninitial_conditions=\"noisy\",integrator=Tsit5(), kwargs...)\n\nSolve the ODE for the network model using a steady state solver.\n\nArguments\n\ng::SimpleGraph{<:Integer}: Graph.\ninteraction_mode::String: Interaction mode.\ntaxation_mode::String: Taxation mode.\nT::Real: Temperature.\nseed::Integer: Random seed.\n\nOptional arguments\n\n`initial_conditions::Union{String, Vector{<:Real}}`=\"noisy\": Initial conditions\nfor the ODE. Default is \"noisy\", which sets the initial conditions to a random value\naround 1/N. Other options are \"random\" and \"uniform\". If a vector is passed, it will be\nused as the initial conditions.\n`x0::Union{Nothing, Vector{<:Real}}`=nothing: Initial wealth distribution.\n`integrator::SciMLAlgorithm`: An instance of the integrator to use. Default is Tsit5().\n`kwargs...`: Additional arguments for the solver.\n\nDetails\n\nThis function solves the ODE for the network model using a steady state solver. It is similar to solve_ode_net, but it uses the DynamicSS solver to find the steady state. Instead of an ODE problem, it uses a SteadyStateProblem to solve the ODE. Reference: https://docs.sciml.ai/DiffEqDocs/stable/types/steadystatetypes/\n\nAs in solve_ode_net, the initial conditions can be set to \"noisy\", \"random\", \"uniform\", or a custom vector.\n\nReturns\n\nsol::ODESolution: Solution of the ODE.\n\nExamples\n\nusing DifferentialEquations, Graphs, YardSale\n# Create a graph\ng = erdos_renyi(100, 0.1, seed=42)\ninteraction_mode, taxation_mode = \"A\",\"A\"\nT = 1.0\nseed = 42\nsol1 = solve_ode_steady_state(g, interaction_mode, taxation_mode, T, seed)\nsol2 = solve_ode_steady_state(g, interaction_mode, taxation_mode, T, seed; integrator=RK4())\nsol3 = solve_ode_steady_state(g, interaction_mode, taxation_mode, T, seed;\n                            integrator=RK4(),reltol=1e-6, abstol=1e-6\n                            )\n\n\n\n\n\n","category":"method"},{"location":"#YardSale.jl","page":"Home","title":"YardSale.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for YardSale.jl","category":"page"},{"location":"#WARNING","page":"Home","title":"WARNING","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"***–> This package is still under development <–***","category":"page"}]
}
